<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.kotlin.kapt)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.knowmyspot&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.knowmyspot&quot;&#10;        minSdk = 26&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.2.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(libs.play.services.location)&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.knowmyspot&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.knowmyspot&quot;&#10;        minSdk = 26&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.2.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(libs.play.services.location)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryActivity.kt" />
              <option name="originalContent" value="package com.example.knowmyspot&#10;&#10;import android.os.Bundle&#10;import android.widget.*&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class HistoryActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_history)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnBack).setOnClickListener {&#10;            finish()&#10;        }&#10;&#10;        val listView = findViewById&lt;ListView&gt;(R.id.listHistory)&#10;        val emptyView = findViewById&lt;TextView&gt;(R.id.tvHistoryEmpty)&#10;&#10;        val adapter = object : ArrayAdapter&lt;HistoryItem&gt;(this, R.layout.item_history, R.id.tvHistoryItemInfo, HistoryStorage.items) {&#10;            override fun getView(position: Int, convertView: android.view.View?, parent: android.view.ViewGroup): android.view.View {&#10;                val inflater = layoutInflater&#10;                val view = convertView ?: inflater.inflate(R.layout.item_history, parent, false)&#10;                val item = getItem(position)&#10;                val info = view.findViewById&lt;TextView&gt;(R.id.tvHistoryItemInfo)&#10;                val etNote = view.findViewById&lt;EditText&gt;(R.id.etNote)&#10;                val btnSave = view.findViewById&lt;Button&gt;(R.id.btnSaveNote)&#10;                info.text = &quot;Lat: %.5f, Lon: %.5f\n%s\nPoznámka: %s&quot;.format(item?.latitude, item?.longitude, item?.weather, item?.note ?: &quot;--&quot;)&#10;                etNote.setText(item?.note ?: &quot;&quot;)&#10;                btnSave.setOnClickListener {&#10;                    item?.let {&#10;                        // Poznámka musí být var, ne val, proto upravíme HistoryItem&#10;                        val index = HistoryStorage.items.indexOf(it)&#10;                        if (index != -1) {&#10;                            HistoryStorage.items[index] = it.copy(note = etNote.text.toString())&#10;                            notifyDataSetChanged()&#10;                        }&#10;                    }&#10;                }&#10;                return view&#10;            }&#10;        }&#10;        listView.adapter = adapter&#10;        listView.emptyView = emptyView&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.ListView&#10;import android.widget.TextView&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class HistoryActivity : AppCompatActivity() {&#10;&#10;    private val historyViewModel: HistoryViewModel by viewModels {&#10;        HistoryViewModelFactory((application as LocationApplication).repository)&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_history)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnBack).setOnClickListener {&#10;            finish()&#10;        }&#10;&#10;        val listView = findViewById&lt;ListView&gt;(R.id.listHistory)&#10;        val emptyView = findViewById&lt;TextView&gt;(R.id.tvHistoryEmpty)&#10;        listView.emptyView = emptyView&#10;&#10;        historyViewModel.allRecords.observe(this) { records -&gt;&#10;            records?.let {&#10;                val adapter = HistoryAdapter(this, it, historyViewModel)&#10;                listView.adapter = adapter&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryStorage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryStorage.kt" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;data class HistoryItem(&#10;    val latitude: Double,&#10;    val longitude: Double,&#10;    val weather: String,&#10;    val note: String? = null,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;object HistoryStorage {&#10;    val items = mutableListOf&lt;HistoryItem&gt;()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/HistoryViewModel.kt" />
              <option name="originalContent" value="package com.example.knowmyspot&#10;&#10;import androidx.lifecycle.*&#10;import com.example.knowmyspot.data.LocationRecord&#10;import com.example.knowmyspot.data.LocationRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class HistoryViewModel(private val repository: LocationRepository) : ViewModel() {&#10;&#10;    val allRecords: LiveData&lt;List&lt;LocationRecord&gt;&gt; = repository.allRecords.asLiveData()&#10;&#10;    fun update(locationRecord: LocationRecord) = viewModelScope.launch {&#10;        repository.update(locationRecord)&#10;    }&#10;}&#10;&#10;class HistoryViewModelFactory(private val repository: LocationRepository) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(HistoryViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return HistoryViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;import androidx.lifecycle.*&#10;import com.example.knowmyspot.data.LocationRecord&#10;import com.example.knowmyspot.data.LocationRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class HistoryViewModel(private val repository: LocationRepository) : ViewModel() {&#10;&#10;    private val _allRecords = MutableLiveData&lt;List&lt;LocationRecord&gt;&gt;()&#10;    val allRecords: LiveData&lt;List&lt;LocationRecord&gt;&gt; = _allRecords&#10;&#10;    init {&#10;        loadRecords()&#10;    }&#10;&#10;    private fun loadRecords() {&#10;        viewModelScope.launch {&#10;            _allRecords.postValue(repository.getAllRecords())&#10;        }&#10;    }&#10;&#10;    fun update(locationRecord: LocationRecord) = viewModelScope.launch {&#10;        repository.update(locationRecord)&#10;        loadRecords()&#10;    }&#10;}&#10;&#10;class HistoryViewModelFactory(private val repository: LocationRepository) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(HistoryViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return HistoryViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/LocationApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/LocationApplication.kt" />
              <option name="originalContent" value="package com.example.knowmyspot&#10;&#10;import android.app.Application&#10;import com.example.knowmyspot.data.AppDatabase&#10;import com.example.knowmyspot.data.LocationRepository&#10;&#10;class LocationApplication : Application() {&#10;    val database by lazy { AppDatabase.getDatabase(this) }&#10;    val repository by lazy { LocationRepository(database.locationDao()) }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;import android.app.Application&#10;import com.example.knowmyspot.data.AppDatabase&#10;import com.example.knowmyspot.data.LocationRepository&#10;&#10;class LocationApplication : Application() {&#10;    val database: AppDatabase by lazy { AppDatabase(this) }&#10;    val repository: LocationRepository by lazy { LocationRepository(database) }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/MainActivity.kt" />
              <option name="originalContent" value="package com.example.knowmyspot&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.location.Location&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.annotation.RequiresPermission&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationServices&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private lateinit var tvLocation: TextView&#10;    private lateinit var tvWeather: TextView&#10;    private lateinit var btnRefresh: Button&#10;&#10;    private var lastLat: Double? = null&#10;    private var lastLon: Double? = null&#10;    private var lastWeather: String? = null&#10;    private val weatherApiKey = &quot;daf995ddd2e62368f8cb8e6151c40a4e&quot;&#10;    private val weatherApi: WeatherApi by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;            .create(WeatherApi::class.java)&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)&#10;        tvLocation = findViewById(R.id.tvLocation)&#10;        tvWeather = findViewById(R.id.tvWeather)&#10;        btnRefresh = findViewById(R.id.btnRefresh)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnHistory).setOnClickListener {&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnSettings).setOnClickListener {&#10;            startActivity(Intent(this, SettingsActivity::class.java))&#10;        }&#10;&#10;        btnRefresh.setOnClickListener {&#10;            getLastLocation()&#10;            getWeather()&#10;        }&#10;        getLastLocation()&#10;        getWeather()&#10;    }&#10;&#10;    @RequiresPermission(anyOf = [Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION])&#10;    private fun getLastLocation() {&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &amp;&amp;&#10;            ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 100)&#10;            return&#10;        }&#10;        fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? -&gt;&#10;            if (location != null) {&#10;                tvLocation.text = &quot;Lat: ${location.latitude}, Lon: ${location.longitude}&quot;&#10;                lastLat = location.latitude&#10;                lastLon = location.longitude&#10;                getWeather() // Po získání polohy rovnou načti počasí&#10;            } else {&#10;                tvLocation.text = &quot;Poloha není dostupná&quot;&#10;                tvWeather.text = &quot;Počasí: --&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getWeather() {&#10;        val lat = lastLat&#10;        val lon = lastLon&#10;        if (lat == null || lon == null) {&#10;            tvWeather.text = &quot;Počasí: --&quot;&#10;            Log.e(&quot;Weather&quot;, &quot;Souřadnice nejsou k dispozici&quot;)&#10;            return&#10;        }&#10;        weatherApi.getWeather(lat, lon, weatherApiKey).enqueue(object : Callback&lt;WeatherResponse&gt; {&#10;            override fun onResponse(call: Call&lt;WeatherResponse&gt;, response: Response&lt;WeatherResponse&gt;) {&#10;                if (!response.isSuccessful) {&#10;                    tvWeather.text = &quot;Počasí: --&quot;&#10;                    Log.e(&quot;Weather&quot;, &quot;Chyba HTTP: ${response.code()} ${response.message()}&quot;)&#10;                    return&#10;                }&#10;                val body = response.body()&#10;                if (body != null) {&#10;                    val desc = body.weather.firstOrNull()?.description ?: &quot;--&quot;&#10;                    val temp = body.main.temp&#10;                    val weatherText = &quot;Počasí: $temp°C, $desc&quot;&#10;                    tvWeather.text = weatherText&#10;                    lastWeather = weatherText&#10;                    // Uložení do historie&#10;                    val lat = lastLat&#10;                    val lon = lastLon&#10;                    if (lat != null &amp;&amp; lon != null) {&#10;                        HistoryStorage.items.add(0, HistoryItem(lat, lon, weatherText))&#10;                    }&#10;                    Log.d(&quot;Weather&quot;, &quot;Úspěch: $temp°C, $desc&quot;)&#10;                } else {&#10;                    tvWeather.text = &quot;Počasí: --&quot;&#10;                    Log.e(&quot;Weather&quot;, &quot;Tělo odpovědi je null&quot;)&#10;                }&#10;            }&#10;            override fun onFailure(call: Call&lt;WeatherResponse&gt;, t: Throwable) {&#10;                tvWeather.text = &quot;Počasí: --&quot;&#10;                Log.e(&quot;Weather&quot;, &quot;Chyba volání: ${t.message}&quot;, t)&#10;            }&#10;        })&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == 100 &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;            getLastLocation()&#10;        }&#10;    }&#10;}&#10;&#10;// --- OpenWeatherMap API rozhraní ---&#10;interface WeatherApi {&#10;    @GET(&quot;weather&quot;)&#10;    fun getWeather(&#10;        @Query(&quot;lat&quot;) lat: Double,&#10;        @Query(&quot;lon&quot;) lon: Double,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;cz&quot;&#10;    ): Call&lt;WeatherResponse&gt;&#10;}&#10;&#10;data class WeatherResponse(&#10;    val weather: List&lt;WeatherDesc&gt;,&#10;    val main: MainWeather&#10;)&#10;data class WeatherDesc(val description: String)&#10;data class MainWeather(val temp: Double)&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.location.Location&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.annotation.RequiresPermission&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.knowmyspot.data.LocationRecord&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationServices&#10;import kotlinx.coroutines.launch&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private lateinit var tvLocation: TextView&#10;    private lateinit var tvWeather: TextView&#10;    private lateinit var btnRefresh: Button&#10;&#10;    private val repository by lazy { (application as LocationApplication).repository }&#10;&#10;    private var lastLat: Double? = null&#10;    private var lastLon: Double? = null&#10;    private var lastWeather: String? = null&#10;    private val weatherApiKey = &quot;daf995ddd2e62368f8cb8e6151c40a4e&quot;&#10;    private val weatherApi: WeatherApi by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;            .create(WeatherApi::class.java)&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)&#10;        tvLocation = findViewById(R.id.tvLocation)&#10;        tvWeather = findViewById(R.id.tvWeather)&#10;        btnRefresh = findViewById(R.id.btnRefresh)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnHistory).setOnClickListener {&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnSettings).setOnClickListener {&#10;            startActivity(Intent(this, SettingsActivity::class.java))&#10;        }&#10;&#10;        btnRefresh.setOnClickListener {&#10;            getLastLocation()&#10;        }&#10;        getLastLocation()&#10;    }&#10;&#10;    @RequiresPermission(anyOf = [Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION])&#10;    private fun getLastLocation() {&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &amp;&amp;&#10;            ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 100)&#10;            return&#10;        }&#10;        fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? -&gt;&#10;            if (location != null) {&#10;                tvLocation.text = &quot;Lat: ${location.latitude}, Lon: ${location.longitude}&quot;&#10;                lastLat = location.latitude&#10;                lastLon = location.longitude&#10;                getWeather() // Po získání polohy rovnou načti počasí&#10;            } else {&#10;                tvLocation.text = &quot;Poloha není dostupná&quot;&#10;                tvWeather.text = &quot;Počasí: --&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getWeather() {&#10;        val lat = lastLat&#10;        val lon = lastLon&#10;        if (lat == null || lon == null) {&#10;            tvWeather.text = &quot;Počasí: --&quot;&#10;            Log.e(&quot;Weather&quot;, &quot;Souřadnice nejsou k dispozici&quot;)&#10;            return&#10;        }&#10;        weatherApi.getWeather(lat, lon, weatherApiKey).enqueue(object : Callback&lt;WeatherResponse&gt; {&#10;            override fun onResponse(call: Call&lt;WeatherResponse&gt;, response: Response&lt;WeatherResponse&gt;) {&#10;                if (!response.isSuccessful) {&#10;                    tvWeather.text = &quot;Počasí: --&quot;&#10;                    Log.e(&quot;Weather&quot;, &quot;Chyba HTTP: ${response.code()} ${response.message()}&quot;)&#10;                    return&#10;                }&#10;                val body = response.body()&#10;                if (body != null) {&#10;                    val desc = body.weather.firstOrNull()?.description ?: &quot;--&quot;&#10;                    val temp = body.main.temp&#10;                    val weatherText = &quot;Počasí: $temp°C, $desc&quot;&#10;                    tvWeather.text = weatherText&#10;                    lastWeather = weatherText&#10;                    // Uložení do historie&#10;                    val lat = lastLat&#10;                    val lon = lastLon&#10;                    if (lat != null &amp;&amp; lon != null) {&#10;                        lifecycleScope.launch {&#10;                            repository.insert(&#10;                                LocationRecord(&#10;                                    latitude = lat,&#10;                                    longitude = lon,&#10;                                    timestamp = System.currentTimeMillis(),&#10;                                    address = weatherText&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                    Log.d(&quot;Weather&quot;, &quot;Úspěch: $temp°C, $desc&quot;)&#10;                } else {&#10;                    tvWeather.text = &quot;Počasí: --&quot;&#10;                    Log.e(&quot;Weather&quot;, &quot;Tělo odpovědi je null&quot;)&#10;                }&#10;            }&#10;            override fun onFailure(call: Call&lt;WeatherResponse&gt;, t: Throwable) {&#10;                tvWeather.text = &quot;Počasí: --&quot;&#10;                Log.e(&quot;Weather&quot;, &quot;Chyba volání: ${t.message}&quot;, t)&#10;            }&#10;        })&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == 100 &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;            getLastLocation()&#10;        }&#10;    }&#10;}&#10;&#10;// --- OpenWeatherMap API rozhraní ---&#10;interface WeatherApi {&#10;    @GET(&quot;weather&quot;)&#10;    fun getWeather(&#10;        @Query(&quot;lat&quot;) lat: Double,&#10;        @Query(&quot;lon&quot;) lon: Double,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;cz&quot;&#10;    ): Call&lt;WeatherResponse&gt;&#10;}&#10;&#10;data class WeatherResponse(&#10;    val weather: List&lt;WeatherDesc&gt;,&#10;    val main: MainWeather&#10;)&#10;data class WeatherDesc(val description: String)&#10;data class MainWeather(val temp: Double)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.knowmyspot&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_settings)&#10;    }&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_settings)&#10;&#10;        findViewById&lt;android.widget.Button&gt;(R.id.btnBack).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/AppDatabase.kt" />
              <option name="originalContent" value="package com.example.knowmyspot.data&#10;&#10;import android.content.Context&#10;import android.database.sqlite.SQLiteDatabase&#10;import android.database.sqlite.SQLiteOpenHelper&#10;import android.content.ContentValues&#10;&#10;class AppDatabase(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {&#10;&#10;    companion object {&#10;        private const val DATABASE_NAME = &quot;location_history.db&quot;&#10;        private const val DATABASE_VERSION = 2 // zvýšení verze kvůli migraci&#10;&#10;        const val TABLE_NAME = &quot;location_records&quot;&#10;        const val COLUMN_ID = &quot;id&quot;&#10;        const val COLUMN_LAT = &quot;latitude&quot;&#10;        const val COLUMN_LNG = &quot;longitude&quot;&#10;        const val COLUMN_TIMESTAMP = &quot;timestamp&quot;&#10;        const val COLUMN_ADDRESS = &quot;address&quot;&#10;        const val COLUMN_NOTE = &quot;note&quot;&#10;&#10;        private const val SQL_CREATE_TABLE =&#10;            &quot;CREATE TABLE $TABLE_NAME (&quot; +&#10;                    &quot;$COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    &quot;$COLUMN_LAT REAL NOT NULL, &quot; +&#10;                    &quot;$COLUMN_LNG REAL NOT NULL, &quot; +&#10;                    &quot;$COLUMN_TIMESTAMP INTEGER NOT NULL, &quot; +&#10;                    &quot;$COLUMN_ADDRESS TEXT NOT NULL, &quot; +&#10;                    &quot;$COLUMN_NOTE TEXT&quot; +&#10;            &quot;)&quot;&#10;        private const val SQL_DROP_TABLE = &quot;DROP TABLE IF EXISTS $TABLE_NAME&quot;&#10;    }&#10;&#10;    override fun onCreate(db: SQLiteDatabase) {&#10;        db.execSQL(SQL_CREATE_TABLE)&#10;    }&#10;&#10;    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {&#10;        db.execSQL(SQL_DROP_TABLE)&#10;        onCreate(db)&#10;    }&#10;&#10;    fun insertRecord(record: LocationRecord): Long {&#10;        val db = writableDatabase&#10;        val values = ContentValues().apply {&#10;            put(COLUMN_LAT, record.latitude)&#10;            put(COLUMN_LNG, record.longitude)&#10;            put(COLUMN_TIMESTAMP, record.timestamp)&#10;            put(COLUMN_ADDRESS, record.address)&#10;            put(COLUMN_NOTE, record.note)&#10;        }&#10;        return db.insert(TABLE_NAME, null, values)&#10;    }&#10;&#10;    fun updateRecord(record: LocationRecord): Int {&#10;        val db = writableDatabase&#10;        val values = ContentValues().apply {&#10;            put(COLUMN_LAT, record.latitude)&#10;            put(COLUMN_LNG, record.longitude)&#10;            put(COLUMN_TIMESTAMP, record.timestamp)&#10;            put(COLUMN_ADDRESS, record.address)&#10;            put(COLUMN_NOTE, record.note)&#10;        }&#10;        return db.update(TABLE_NAME, values, &quot;$COLUMN_ID = ?&quot;, arrayOf(record.id.toString()))&#10;    }&#10;&#10;    fun getAllRecords(): List&lt;LocationRecord&gt; {&#10;        val db = readableDatabase&#10;        val cursor = db.query(&#10;            TABLE_NAME,&#10;            arrayOf(COLUMN_ID, COLUMN_LAT, COLUMN_LNG, COLUMN_TIMESTAMP, COLUMN_ADDRESS, COLUMN_NOTE),&#10;            null, null, null, null,&#10;            &quot;$COLUMN_TIMESTAMP DESC&quot;&#10;        )&#10;        val records = mutableListOf&lt;LocationRecord&gt;()&#10;        while (cursor.moveToNext()) {&#10;            val id = cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_ID))&#10;            val lat = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_LAT))&#10;            val lng = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_LNG))&#10;            val ts = cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_TIMESTAMP))&#10;            val address = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_ADDRESS))&#10;            val note = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NOTE))&#10;            records.add(LocationRecord(id, lat, lng, ts, address, note))&#10;        }&#10;        cursor.close()&#10;        return records&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot.data&#10;&#10;import android.content.Context&#10;import android.database.sqlite.SQLiteDatabase&#10;import android.database.sqlite.SQLiteOpenHelper&#10;import android.content.ContentValues&#10;&#10;class AppDatabase(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {&#10;&#10;    companion object {&#10;        private const val DATABASE_NAME = &quot;location_history.db&quot;&#10;        private const val DATABASE_VERSION = 2 // zvýšení verze kvůli migraci&#10;&#10;        const val TABLE_NAME = &quot;location_records&quot;&#10;        const val COLUMN_ID = &quot;id&quot;&#10;        const val COLUMN_LAT = &quot;latitude&quot;&#10;        const val COLUMN_LNG = &quot;longitude&quot;&#10;        const val COLUMN_TIMESTAMP = &quot;timestamp&quot;&#10;        const val COLUMN_ADDRESS = &quot;address&quot;&#10;        const val COLUMN_NOTE = &quot;note&quot;&#10;&#10;        private const val SQL_CREATE_TABLE =&#10;            &quot;CREATE TABLE $TABLE_NAME (&quot; +&#10;                    &quot;$COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    &quot;$COLUMN_LAT REAL NOT NULL, &quot; +&#10;                    &quot;$COLUMN_LNG REAL NOT NULL, &quot; +&#10;                    &quot;$COLUMN_TIMESTAMP INTEGER NOT NULL, &quot; +&#10;                    &quot;$COLUMN_ADDRESS TEXT NOT NULL, &quot; +&#10;                    &quot;$COLUMN_NOTE TEXT&quot; +&#10;            &quot;)&quot;&#10;        private const val SQL_DROP_TABLE = &quot;DROP TABLE IF EXISTS $TABLE_NAME&quot;&#10;    }&#10;&#10;    override fun onCreate(db: SQLiteDatabase) {&#10;        db.execSQL(SQL_CREATE_TABLE)&#10;    }&#10;&#10;    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {&#10;        db.execSQL(SQL_DROP_TABLE)&#10;        onCreate(db)&#10;    }&#10;&#10;    fun insertRecord(record: LocationRecord): Long {&#10;        val db = writableDatabase&#10;        val values = ContentValues().apply {&#10;            put(COLUMN_LAT, record.latitude)&#10;            put(COLUMN_LNG, record.longitude)&#10;            put(COLUMN_TIMESTAMP, record.timestamp)&#10;            put(COLUMN_ADDRESS, record.address)&#10;            put(COLUMN_NOTE, record.note)&#10;        }&#10;        return db.insert(TABLE_NAME, null, values)&#10;    }&#10;&#10;    fun updateRecord(record: LocationRecord): Int {&#10;        val db = writableDatabase&#10;        val values = ContentValues().apply {&#10;            put(COLUMN_LAT, record.latitude)&#10;            put(COLUMN_LNG, record.longitude)&#10;            put(COLUMN_TIMESTAMP, record.timestamp)&#10;            put(COLUMN_ADDRESS, record.address)&#10;            put(COLUMN_NOTE, record.note)&#10;        }&#10;        return db.update(TABLE_NAME, values, &quot;$COLUMN_ID = ?&quot;, arrayOf(record.id.toString()))&#10;    }&#10;&#10;    fun getAllRecords(): List&lt;LocationRecord&gt; {&#10;        val db = readableDatabase&#10;        val cursor = db.query(&#10;            TABLE_NAME,&#10;            arrayOf(COLUMN_ID, COLUMN_LAT, COLUMN_LNG, COLUMN_TIMESTAMP, COLUMN_ADDRESS, COLUMN_NOTE),&#10;            null, null, null, null,&#10;            &quot;$COLUMN_TIMESTAMP DESC&quot;&#10;        )&#10;        val records = mutableListOf&lt;LocationRecord&gt;()&#10;        while (cursor.moveToNext()) {&#10;            val id = cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_ID)).toInt()&#10;            val lat = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_LAT))&#10;            val lng = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_LNG))&#10;            val ts = cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_TIMESTAMP))&#10;            val address = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_ADDRESS))&#10;            val note = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NOTE))&#10;            records.add(LocationRecord(id, lat, lng, ts, address, note))&#10;        }&#10;        cursor.close()&#10;        return records&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationDao.kt" />
              <option name="originalContent" value="package com.example.knowmyspot.data&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import androidx.room.Update&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface LocationDao {&#10;    @Insert&#10;    suspend fun insert(locationRecord: LocationRecord)&#10;&#10;    @Query(&quot;SELECT * FROM location_records ORDER BY timestamp DESC&quot;)&#10;    fun getAllRecords(): Flow&lt;List&lt;LocationRecord&gt;&gt;&#10;&#10;    @Update&#10;    suspend fun update(locationRecord: LocationRecord)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot.data&#10;&#10;// Tento soubor je nyní prázdný, protože Room se již nepoužívá." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationRecord.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationRecord.kt" />
              <option name="originalContent" value="package com.example.knowmyspot.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;location_records&quot;)&#10;data class LocationRecord(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Int = 0,&#10;    val latitude: Double,&#10;    val longitude: Double,&#10;    val timestamp: Long,&#10;    val address: String,&#10;    val note: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot.data&#10;&#10;data class LocationRecord(&#10;    val id: Int = 0,&#10;    val latitude: Double,&#10;    val longitude: Double,&#10;    val timestamp: Long,&#10;    val address: String,&#10;    val note: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/knowmyspot/data/LocationRepository.kt" />
              <option name="originalContent" value="package com.example.knowmyspot.data&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class LocationRepository(private val locationDao: LocationDao) {&#10;    val allRecords: Flow&lt;List&lt;LocationRecord&gt;&gt; = locationDao.getAllRecords()&#10;&#10;    suspend fun insert(locationRecord: LocationRecord) {&#10;        locationDao.insert(locationRecord)&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.knowmyspot.data&#10;&#10;class LocationRepository(private val db: AppDatabase) {&#10;    fun getAllRecords(): List&lt;LocationRecord&gt; = db.getAllRecords()&#10;&#10;    fun insert(locationRecord: LocationRecord) {&#10;        db.insertRecord(locationRecord)&#10;    }&#10;&#10;    fun update(locationRecord: LocationRecord) {&#10;        db.updateRecord(locationRecord)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit_24.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M3 17.25V21h3.75l11.06-11.06-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_history.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvHistoryTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Historie poloh a počasí&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;ListView&#10;        android:id=&quot;@+id/listHistory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:divider=&quot;@android:color/darker_gray&quot;&#10;        android:dividerHeight=&quot;1dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvHistoryEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Žádná historie zatím není.&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvHistoryTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Historie poloh a počasí&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;ListView&#10;        android:id=&quot;@+id/listHistory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:divider=&quot;@android:color/darker_gray&quot;&#10;        android:dividerHeight=&quot;1dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvHistoryEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Žádná historie zatím není.&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBack&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Zpět&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Poznej moje místo&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnHistory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Historie&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSettings&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Nastavení / Poznámka&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLocation&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Poloha: --&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:layout_marginTop=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Poznej moje místo&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnHistory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Historie&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSettings&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Nastavení / Poznámka&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLocation&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Poloha: --&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:layout_marginTop=&quot;24dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnRefresh&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Obnovit polohu a počasí&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvWeather&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Počasí: --&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;!-- Další prvky pro lokaci, počasí, fakt atd. budou doplněny --&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_settings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvSettingsTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Nastavení / Poznámka&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- Zde bude možnost přidat poznámku nebo nastavit jednotky --&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvSettingsTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Nastavení / Poznámka&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:paddingBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- Zde bude možnost přidat poznámku nebo nastavit jednotky --&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBack&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Zpět&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_history.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvHistoryItemInfo&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Info&quot;&#10;            android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnEditNote&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_edit&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:contentDescription=&quot;Editovat poznámku&quot;&#10;            android:padding=&quot;4dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etNote&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Poznámka...&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveNote&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Uložit poznámku&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:layout_marginTop=&quot;4dp&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvHistoryItemInfo&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Info&quot;&#10;            android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnEditNote&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:src=&quot;@drawable/ic_edit_24&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:contentDescription=&quot;Editovat poznámku&quot;&#10;            android:padding=&quot;4dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etNote&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Poznámka...&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveNote&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Uložit poznámku&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:layout_marginTop=&quot;4dp&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Theme.KnowMySpot&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot;/&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Theme.KnowMySpot&quot; parent=&quot;Theme.AppCompat.DayNight.NoActionBar&quot;/&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>